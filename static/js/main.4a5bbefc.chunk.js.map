{"version":3,"sources":["bbadintro.gif","bb.gif","bbadicon.png","pages/home.js","components/loader.js","pages/actor.js","components/search.js","pages/actors.js","pages/404.js","components/nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","bbgif","alt","loader","loadinggif","Actor","match","useState","singleactor","setActor","isLoading","setIsLoading","useEffect","actorId","params","id","a","axios","results","data","message","console","log","getActor","style","width","height","img","status","color","name","birthday","nickname","portrayed","appearance","map","season","toString","occupation","index","key","Search","Query","keywords","setKeywords","value","type","placeholder","onChange","e","q","target","Actors","actors","setActors","query","setQuery","getActors","actor","char_id","title","to","Notfound","nav","logo","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","App","exact","path","component","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,yMC2C5BC,MAzCd,WACG,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,YAEf,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YAAYC,IAAKC,IAAOC,IAAI,wBAG/C,yBAAKH,UAAU,iBACf,wBAAIA,UAAU,gBAAe,iDAC7B,wBAAIA,UAAU,cAAd,8NAOA,6BACA,2BAAOA,UAAU,qBAAoB,0CACrC,yBAAKA,UAAU,cACf,2CACA,wCACA,2CACA,4CACA,wCAGA,6BACA,2BAAOA,UAAU,qBAAoB,+CACrC,yBAAKA,UAAU,cACf,qD,kEC/BG,SAASI,IACpB,OACI,6BACI,yBAAKJ,UAAU,UACf,yBAAKA,UAAU,aAAaC,IAAKI,IAAYF,IAAI,aCH9C,SAASG,EAAT,GAAyB,IAATC,EAAQ,EAARA,MAAQ,EACJC,mBAAS,IADL,mBAC5BC,EAD4B,KAChBC,EADgB,OAEFF,oBAAS,GAFP,mBAE5BG,EAF4B,KAElBC,EAFkB,KAInCC,qBAAU,WACN,IAAMC,EAAUP,EAAMQ,OAAOC,GAc7B,OAbc,uCAAG,4BAAAC,EAAA,+EAEaC,IAAM,iDAAD,OAAkDJ,IAFpE,OAEHK,EAFG,OAGTT,EAASS,EAAQC,KAAK,IACtBR,GAAcD,GAJL,gDAMTC,GAAcD,GACK,kBAAhB,KAAIU,SACPC,QAAQC,IAAI,4BARH,yDAAH,oDAYdC,GACO,kBAAMF,QAAQC,SACvB,IAEF,IAAiB,EAUjB,OACI,6BACCZ,EACG,kBAAC,EAAD,MAEH,yBAAKX,UAAU,kBAChB,yBAAKA,UAAU,aACZ,6BACI,yBAAMA,UAAU,kBAAkByB,MAAO,CAACC,MAAM,QAAQC,OAAO,SAAU1B,IAAKQ,EAAYmB,IAAKzB,IAAI,KACnG,2BACCsB,OApBK,EAoBUhB,EAnBL,UADQ,EAAZoB,OAIL,CACbC,MAAM,SAEK,CACXA,MAAM,SAY8CrB,EAAYoB,SAGzD,yBAAK7B,UAAU,WACX,2CACA,6BACA,mCACA,4BAAKS,EAAYsB,MACjB,uCACA,4BAAKtB,EAAYuB,UACjB,uCACA,4BAAKvB,EAAYwB,UACjB,2CACA,4BAAKxB,EAAYyB,WACjB,sCACA,4BAAKzB,EAAY0B,WAAWC,KAAI,SAAAC,GAAM,OAAIA,KAAQC,YAClD,yCACC7B,EAAY8B,WAAWH,KAAI,SAACG,EAAWC,GAAZ,OACxB,wBAAIC,IAAKD,GACL,4BAAKD,WC9Db,SAASG,EAAT,GAA0B,IAATC,EAAQ,EAARA,MAAQ,EAELnC,mBAAS,IAFJ,mBAE7BoC,EAF6B,KAEpBC,EAFoB,KASpC,OACI,yBAAK7C,UAAU,aACX,8BACA,2BAAOA,UAAU,eAAe8C,MAAOF,EAAUG,KAAK,OAAOC,YAAY,uBAAuBC,SAAU,SAACC,GAAD,OAR9FC,EAQiHD,EAAEE,OAAON,MAP1ID,EAAYM,QACZR,EAAMQ,GAFU,IAAAA,OCiDTE,MAjDf,WAAmB,IAAD,EAEa7C,mBAAS,IAFtB,mBAEP8C,EAFO,KAEAC,EAFA,OAGmB/C,oBAAS,GAH5B,mBAGPG,EAHO,KAGGC,EAHH,OAIWJ,mBAAS,IAJpB,mBAIPgD,EAJO,KAIDC,EAJC,KAyBd,OAnBA5C,qBAAU,WAgBN,OAfe,uCAAG,4BAAAI,EAAA,6DACdK,QAAQC,IAAIiC,GADE,kBAGYtC,IAAM,sDAAD,OAAuDsC,IAHxE,OAGJrC,EAHI,OAIVoC,EAAUpC,EAAQC,MAClBR,GAAa,GALH,gDAOVA,GAAa,GACM,kBAAhB,KAAIS,SACPC,QAAQC,IAAI,4BATF,yDAAH,oDAafmC,GAEO,kBAAMpC,QAAQC,SACvB,CAACiC,IAGK7C,EACA,kBAAC,EAAD,MAEA,yBAAKX,UAAU,aACf,kBAAC0C,EAAD,CAAQC,MAAQ,SAAAQ,GAAC,OAAIM,EAASN,MAC9B,yBAAKnD,UAAU,OACVsD,EAAOlB,KAAI,SAACuB,GAAD,OACZ,yBAAK3D,UAAU,sBAAsByC,IAAKkB,EAAMC,SAC5C,yBAAK5D,UAAU,aAAcC,IAAK0D,EAAM/B,IAAKzB,IAAI,KACjD,yBAAKH,UAAU,WACf,0BAAMA,UAAU,wBAAwB2D,EAAM5B,MAC9C,kBAAC,IAAD,CAAM/B,UAAU,YAAY6D,MAAM,qBAAqBC,GAAE,iBAAYH,EAAMC,UAA3E,QAEA,qCC3CL,SAASG,IACpB,OACI,6BACI,mC,qBCFG,SAASC,IACpB,OACI,yBAAKhE,UAAU,aACf,yBAAKA,UAAU,sEACf,kBAAC,IAAD,CAAUA,UAAU,eAAgB8D,GAAG,KACnC,yBAAK7D,IAAKgE,IAAMjE,UAAU,OAAOG,IAAI,UAEzC,4BAAQH,UAAU,iBAAiB+C,KAAK,SAASmB,cAAY,WAAWC,cAAY,8BAChFC,gBAAc,6BAA6BC,gBAAc,QAAQC,aAAW,qBAC5E,0BAAMtE,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BgB,GAAG,8BACzC,wBAAIhB,UAAU,uBAGd,wBAAIA,UAAU,qCACd,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAASuE,gBAAgB,SAASvE,UAAU,WAAY8D,GAAG,KAA3D,SAEJ,wBAAI9D,UAAU,YACd,kBAAC,IAAD,CAAUA,UAAU,WAAW8D,GAAG,WAAlC,eCIGU,MAlBf,WAEE,OACE,6BACE,4BAAQxE,UAAU,IAClB,kBAAC,EAAD,OAEA,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAM,IAAKC,UAAW5E,IACnC,kBAAC,IAAD,CAAO0E,OAAK,EAACC,KAAM,UAAWC,UAAWtB,IACzC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAM,aAAcC,UAAWrE,IAC5C,kBAAC,IAAD,CAAOqE,UAAWC,OCRVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzE,MACvB,2DCXN0E,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMvE,c","file":"static/js/main.4a5bbefc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bbadintro.4ba0f6db.gif\";","module.exports = __webpack_public_path__ + \"static/media/bb.5a62823d.gif\";","module.exports = __webpack_public_path__ + \"static/media/bbadicon.0bcd43ba.png\";","import React from 'react'\r\nimport bbgif from './../bbadintro.gif'\r\n function Home() {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row pt-5\">\r\n\r\n            <div className=\"col-md-4\">\r\n                <img className=\"img-fluid\" src={bbgif} alt=\"breaking bad intro\"/>\r\n            </div>\r\n\r\n            <div className=\"col-md-8 mt-5\">\r\n            <h1 className=\"text-success\"><strong>Breaking Bad</strong></h1>\r\n            <h6 className=\"text-muted\">\r\n            is an American neo-Western crime drama\r\n             television series created and produced by Vince Gilligan. \r\n             The show aired on AMC from January 20, 2008 to September 29, \r\n             2013, consisting of five seasons for a total of 62 episodes.\r\n            </h6>\r\n\r\n            <div>\r\n            <small className=\"text-success mt-2\"><strong>Genre</strong></small>\r\n            <div className=\"text-muted\">\r\n            <h6>Crime drama</h6>\r\n            <h6>Thriller</h6>\r\n            <h6>Neo-Western</h6>\r\n            <h6>Black comedy</h6>\r\n            <h6>Tragedy</h6>\r\n            </div>\r\n\r\n            <div>\r\n            <small className=\"text-success mt-2\"><strong>Created by</strong></small>\r\n            <div className=\"text-muted\">\r\n            <h6>Vince Gilligan</h6>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home\r\n","import React from 'react'\r\nimport loadinggif from './../bb.gif'\r\nexport default function loader() {\r\n    return (\r\n        <div>\r\n            <div className=\"loader\"> \r\n            <img className=\"loader-img\" src={loadinggif} alt=\"loader\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport Loader from './../components/loader'\r\nexport default function Actor({match}) {\r\n    const [singleactor,setActor] = useState([])\r\n    const [isLoading,setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const actorId = match.params.id\r\n        const getActor = async() => {\r\n            try{\r\n                const results = await axios(`https://www.breakingbadapi.com/api/characters/${actorId}`)\r\n                setActor(results.data[0])\r\n                setIsLoading(!isLoading)\r\n            } catch(err){\r\n                setIsLoading(!isLoading)\r\n                if(err.message === 'Network Error'){\r\n                console.log('Sorry check your network')\r\n                }\r\n            }\r\n        }\r\n        getActor()\r\n        return () => console.log()\r\n    },[]);\r\n\r\n    const isAlive = ({status}) => {\r\n        return status === 'Alive' ? true:false       \r\n   };\r\n\r\n   const green = {\r\n    color:'green'\r\n   }\r\n   const red = {\r\n    color:'red'\r\n   }\r\n    return (\r\n        <div>\r\n        {isLoading ?\r\n            <Loader />\r\n         :\r\n         <div className=\"container pt-4\">\r\n        <div className=\"actor-bio\">\r\n           <div>\r\n               <img  className=\"Actorimage mb-2\" style={{width:\"300px\",height:\"300px\"}} src={singleactor.img} alt=\"\" />\r\n               <small\r\n                style={isAlive(singleactor)?green:red}>{singleactor.status}\r\n                </small>\r\n           </div>\r\n           <div className=\"profile\">\r\n               <strong>Profile</strong>\r\n               <hr/>\r\n               <p>Name</p>\r\n               <h4>{singleactor.name}</h4>\r\n               <p>Birthday</p>\r\n               <h4>{singleactor.birthday}</h4>\r\n               <p>Nickname</p>\r\n               <h4>{singleactor.nickname}</h4>\r\n               <p>Portrayed by</p>\r\n               <h4>{singleactor.portrayed}</h4>\r\n               <p>Seasons</p>\r\n               <h4>{singleactor.appearance.map(season => season).toString()}</h4>\r\n               <p>Occupation</p>\r\n               {singleactor.occupation.map((occupation,index) => (\r\n                   <ul key={index}>\r\n                       <li>{occupation}</li>\r\n                   </ul>\r\n               )  \r\n            )}\r\n           </div>\r\n         </div>\r\n         </div>\r\n            }\r\n         </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function Search({Query}) {\r\n\r\n    const [keywords,setKeywords] = useState('')\r\n\r\n    const submitQuery = q => {\r\n        setKeywords(q)\r\n        Query(q)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"mb-1 mb-2\">\r\n            <form>\r\n            <input className=\"form-control\" value={keywords} type=\"text\" placeholder=\"search for character\" onChange={(e) => submitQuery(e.target.value)}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState,useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Loader from './../components/loader'\r\nimport Search from './../components/search'\r\nimport axios from 'axios'\r\n\r\nfunction Actors() {\r\n\r\n    const [actors,setActors] = useState([])\r\n    const [isLoading,setIsLoading] = useState(true)\r\n    const [query,setQuery] = useState('')\r\n\r\n    useEffect(() => {\r\n        const getActors = async() => {\r\n            console.log(query)\r\n            try{\r\n                const results = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`)\r\n                setActors(results.data)\r\n                setIsLoading(false)\r\n            } catch(err){\r\n                setIsLoading(false)\r\n                if(err.message === 'Network Error'){\r\n                console.log('Sorry check your network')\r\n                }\r\n            }\r\n        }\r\n        getActors()\r\n\r\n        return () => console.log()\r\n    },[query]);\r\n\r\n    return (\r\n            isLoading ? \r\n            <Loader />\r\n            :\r\n            <div className=\"container\">\r\n            <Search Query={ q => setQuery(q) } />\r\n            <div className=\"row\">\r\n                {actors.map((actor) => (\r\n                <div className=\"col-md-3 Actorcover\" key={actor.char_id} >\r\n                    <img className=\"Actorimage\"  src={actor.img} alt=\"\"/>\r\n                    <div className=\"overlay\">\r\n                    <span className=\"Actortext text-white\">{actor.name}</span>\r\n                    <Link className=\"Actorlink\" title=\"click to view more\" to={`/actor/${actor.char_id}`}>...</Link>\r\n                    </div>\r\n                    <div>\r\n                    </div>\r\n                </div>\r\n                   )\r\n                )\r\n                }\r\n            </div>\r\n            </div>        \r\n    )\r\n}\r\nexport default Actors","import React from 'react'\r\n\r\nexport default function Notfound() {\r\n    return (\r\n        <div>\r\n            <p>\r\n                404\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from './../bbadicon.png'\r\nexport default function nav() {\r\n    return (\r\n        <div className=\"container\">\r\n        <nav className=\"mb-3 navbar navbar-expand-lg navbar-dark secondary-color lighten-1\">\r\n        <NavLink  className=\"navbar-brand\"  to=\"/\">\r\n            <img src={logo} className=\"logo\" alt=\"logo\" />\r\n        </NavLink>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent-555\"\r\n            aria-controls=\"navbarSupportedContent-555\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent-555\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n            \r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto nav-flex-icons\">\r\n            <li className=\"nav-item active\">\r\n                <NavLink activeClassName=\"active\" className=\"nav-link\"  to=\"/\">Home</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <NavLink  className=\"nav-link\" to=\"/actors\">Actors</NavLink>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n        </nav>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport {Route,Switch} from 'react-router-dom'\nimport './App.css';\nimport Home from './pages/home'\nimport Actor from './pages/actor'\nimport Actors from './pages/actors'\nimport NotFound from './pages/404'\nimport Navbar from './components/nav'\n\nfunction App() {\n\n  return (\n    <div>\n      <header className=\"\">\n      <Navbar />\n      </header>\n      <Switch>\n            <Route exact path={'/'} component={Home}/>\n            <Route exact path={'/actors'} component={Actors}/>\n            <Route exact path={'/actor/:id'} component={Actor}/>\n            <Route component={NotFound}/>\n      </Switch>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}